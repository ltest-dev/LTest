(**************************************************************************)
(*                                                                        *)
(*  This file is part of Frama-C.                                         *)
(*                                                                        *)
(*  Copyright (C) 2013-2018                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  You may redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 3.                                                *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful, but WITHOUT     *)
(*  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY    *)
(*  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General      *)
(*  Public License for more details.                                      *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 3 for more          *)
(*  details (enclosed in the file LICENSE).                               *)
(*                                                                        *)
(**************************************************************************)

open Unix
open Commons

let number_of_processes = ref 1
let wp_timeout = ref 10

(* WP call *)

let wp_property_checker =
  let check ~label:_ ip = 
    let flag = ref 0 in
    Dynamic.Parameter.Int.set "-wp-timeout" !wp_timeout;
    let wp_compute_ip = Dynamic.get ~plugin:"Wp" "wp_compute_ip" (Datatype.func Property.ty Datatype.unit) in
    (try wp_compute_ip ip with _ ->  Options.feedback "WP crashed during always true check: aborting computation for this label";  incr flag ) ;
    let status = Property_status.get ip in
    Options.debug4 ~level:1 "property: %a -> %a" Property.pretty ip Property_status.pretty status;
    if !flag = 0 then Property_status.Feedback.get ip else Property_status.Feedback.Unknown 
  in
  ("WP", check)

    

(** Process pool: a pool of unix processes that compute label statuses in parallel **)
(* The task of one worker process, with result marshalling of the results to the main process *)
let task (prj, checker, labels) channel = 
        (* Computing label status *)
        List.iter (fun lblid -> Options.feedback "Label %d treated by process %d" lblid (getpid());
        let ip = match Instrument_multicore.add_annotation_get_ip lblid with
  	| None ->  Options.feedback "Unexpected error. Worker with pid %d will exit" (getpid()); 
  		   let message = ("true"^"\n"^(string_of_int (getpid()))^"\n"^"na"^"\n") in
		   output_string channel message;
	           flush channel;
	           close_out channel;
	           exit 1
  	| Some i -> i in 
        let ip_status = with_project prj (fun () -> checker ~label:lblid ip) () in
        let status =  match ip_status with
           | Property_status.Feedback.Valid | Property_status.Feedback.Valid_under_hyp 
             | Property_status.Feedback.Considered_valid | Property_status.Feedback.Valid_but_dead -> "valid"
           | _ -> "invalid" in
        let message = ("false"^"\n"^(string_of_int lblid)^"\n"^status^"\n") in
	output_string channel message;
	flush channel) labels;
	(* Termination *)
	let message = ("true"^"\n"^(string_of_int (getpid()))^"\n"^"na"^"\n") in
	output_string channel message;
	flush channel;
	close_out channel

let no_output () =
    let devnull = descr_of_out_channel (open_out "/dev/null") in
    dup2 devnull stdout 
	
(* The main process creates the worker processes through unix fork and pipes *)
let rec initialize_pool (_,checker) schedule = create_children 0 ([],(Hashtbl.create !number_of_processes)) checker schedule
and create_children cnt acc_fd chk sch =
  let parameter = (Instrument_multicore.create_project (), chk, (List.hd sch)) in
  flush_all ();
  let (fd_in, fd_out) = pipe () in
  match fork () with
  | 0 -> no_output (); close fd_in; task parameter (out_channel_of_descr fd_out); exit 0
  | child_pid -> close fd_out; Options.feedback "Starting worker with pid %d" child_pid;
  		 let new_cnt = cnt + 1 in
  	         if new_cnt < !number_of_processes then begin let res = (create_children new_cnt acc_fd chk (List.tl sch)) in (Hashtbl.add (snd res) fd_in (in_channel_of_descr fd_in)); (fd_in::(fst res),snd res) end else begin (Hashtbl.add (snd acc_fd) fd_in (in_channel_of_descr fd_in)); (fd_in::(fst acc_fd),snd acc_fd) end

let nbLabels = ref 0
let nbTreated = ref 0

(* The main process receives and saves the label statuses computed by the worker processes transmitted through pipes *)
let rec process_results fds chs force (checker_name,_) data = get_results fds chs 0 force checker_name data
and get_results fds chs cnt force checker_name data = match (Unix.select fds [] [] (-1.0)) with
			     | fdl, [], [] -> let process acc fd = (
			                        let channel = Hashtbl.find chs fd in
			                    	let eof = (input_line channel = "true") in
			                    	let lblid = int_of_string (input_line channel) in
			                    	let status = if (input_line channel = "valid") then Data.Uncoverable else Data.Unknown in
			                    	if eof then begin close_in channel; Options.feedback "Exiting worker with pid %d" lblid; fd::acc end
			                    	else begin incr nbTreated; Options.feedback "[%d/%d] Label %d was detected as %a by %s" !nbTreated !nbLabels lblid Data.pp_status status checker_name; Data.update data ~force ~status ~emitter:checker_name lblid; acc end		   		    
			   		    ) in
			   		    let killed_children = (List.fold_left process [] fdl) in
			   		    let nb_killed_children = cnt + (List.length killed_children) in
			   		    if nb_killed_children < !number_of_processes then get_results (List.filter (fun fd -> not (List.mem fd killed_children)) fds) chs nb_killed_children force checker_name data else ()
			     | _, _, _ -> failwith "Unexpected pipe interaction with main process."
  

let process_in_parallel force checker schedule data =
  let (fds,chs) = initialize_pool checker schedule in
  process_results fds chs force checker data
(**********************************************)

 
(** Task a-priori scheduling: given a set of tasks, provide an a-priori distribution between a set of processes **)
(* head_nary [1;2;3;4;5] 2 = ([1,2],[3,4,5]) *)
let rec head_nary l n = split_head [] l n
and split_head h t n = 
     if n>0 then begin
     	match t with 
    	| hd::tl -> split_head (h @ [hd]) tl (n - 1)
    	| [] -> (h,t)
    	end
     else (h,t)

(* split_in_n [1;2;3;4;5] 2 = [[1,2],[3,4],[5]] *)
let rec split_in_n l n = match l with 
    	| _::_ -> let first = head_nary l n in (fst first)::(split_in_n (snd first) n)
    	| [] -> []

(* reassign [[1,2],[3,4]] [[5]] = [[1,2,5],[3,4]] *)
let rec reassign ll l = match ll, l with
        | h1::t1 , h2::t2 -> (h2::h1) :: (reassign t1 t2)
        | [] , _::_ -> []
        | _::_ , [] -> ll
        | [] , [] -> []

(* split [1;2;3;4;5;6;7;8;9;10;11;12] 1 = [[1,2,3,4,5,6,7,8,9,10,11,12]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 2 = [[1,2,3,4,5,6], [7,8,9,10,11,12]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 3 = [[1,2,3,4], [5,6,7,8], [9,10,11,12]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 4 = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 5 = [[11,1,2], [12,3,4], [5,6], [7,8], [9,10]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 6 = [[1,2], [3,4], [5,6], [7,8], [9,10], [11,12]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 7 = [[8,1], [9,2], [10,3], [11,4], [12,5], [6], [7]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 8 = [[9,1], [10,2], [11,3], [12,4], [5], [6], [7], [8]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 9 = [[10,1], [11,2], [12,3], [4], [5], [6], [7], [8], [9]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 10 = [[11,1], [12,2], [3], [4], [5], [6], [7], [8], [9], [10]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 11 = [[12,1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]]
split [1;2;3;4;5;6;7;8;9;10;11;12] 12 = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]] *)
let split tasks nb_processes = let div = (List.length tasks) / nb_processes in
                               let modulo = (List.length tasks) mod nb_processes in 
                               let the_split = split_in_n tasks div in
                               if modulo = 0 then the_split
                               else begin
                               let final_split, to_reassign = (head_nary the_split nb_processes) in
                               (reassign final_split (List.flatten to_reassign)) end
(**********************************************)

  let compute_multicore ?(force=false) data nb_process timeout =
  number_of_processes := nb_process;
  wp_timeout := timeout;
  let checker=wp_property_checker in
  if Options.Rte.get () then
    !Db.RteGen.compute ();
  Instrument_multicore.at := true;
  let tasks = (Instrument_multicore.get_label_ids ()) in
  Options.feedback "start weakest-precondition-based detection";
  nbLabels := (List.length tasks);
  if (List.length tasks) > 0 then begin
  let nb_processes = min (List.length tasks) !number_of_processes in
  let schedule = split tasks nb_processes in
  process_in_parallel force checker schedule data end;
  Options.feedback "WP-based detection (for always true labels) done"
  
  let compute_multicoreAT ?(force=false) data nb_process timeout =
  number_of_processes := nb_process;
  wp_timeout := timeout;
  let checker=wp_property_checker in
  if Options.Rte.get () then
    !Db.RteGen.compute ();
  Instrument_multicore.at := false;
  let tasks = (Instrument_multicore.get_label_ids ()) in
  Options.feedback "start weakest-precondition-based detection (for always true labels)";
  nbLabels := (List.length tasks);
  if (List.length tasks) > 0 then begin
  let nb_processes = min (List.length tasks) !number_of_processes in
  let schedule = split tasks nb_processes in
  process_in_parallel force checker schedule data end;
  Options.feedback "WP-based detection (for always true labels) done"


